<?xml version="1.0" encoding="utf-8"?>
<!--
    At the root, we start with coordinator layout
    which helps to coordinate behaviors across several kinds of views.
    (In this case it will coordinate the scrolling of a list
     with the scrolling of our app bar.)

    Also include the app name space for support library attributes.
-->
<android.support.design.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!--
        Use an AppBarLayout and give it the expanded height we want (168dp).
    -->
    <android.support.design.widget.AppBarLayout
        android:id="@+id/app_bar_layout"
        android:layout_width="match_parent"
        android:layout_height="168dp"
        android:background="?colorPrimary">

        <!--
            Within that we'll include a CollapsingToolbarLayout
            and tell it to scroll off the screen until it reaches the collapsed size,
            that's this exitUntilCollapsed flag.
        -->
        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar_layout"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:collapsedTitleTextAppearance="@style/TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse"
            app:expandedTitleMarginStart="72dp"
            app:expandedTitleTextAppearance="@style/TextAppearance.AppCompat.Widget.ActionBar.Title.Inverse"
            app:layout_scrollFlags="scroll|exitUntilCollapsed">

        </android.support.design.widget.CollapsingToolbarLayout>
    </android.support.design.widget.AppBarLayout>
</android.support.design.widget.CoordinatorLayout>